'''Task 2 Part 1
Write a code, which will:
1. create a list of random number of dicts (from 2 to 10)
dict's random numbers of keys should be letter,
dict's values should be a number (0-100),
example: [{'a': 5, 'b': 7, 'g': 11}, {'a': 3, 'c': 35, 'g': 42}]'''

import random
import string
from collections import defaultdict


def dict_sort(my_dict: dict) -> dict:  # function that gets dict as argument and return sorted dict
    return dict(sorted(my_dict.items()))


# Function that gets random amount of dicts and generate it
# While loop was selected to avoid possibility to miss duplicated values if the same letter will be generated and
# get provided amount of keys in the dict even if it was generated by random
def generating_of_dictionary_with_random_values() -> dict:
    temp_dict = {}  # initialization of the empty dict
    keys_amount = random.randint(3, 26)  # initialization of random amount of pairs to generate
    while True:  # Loop for filling in the dict
        temp_dict[random.choices(string.ascii_lowercase)[0]] = random.randint(0, 100)  # adding random char as
        # a key and random int in range 0-100 as a pair into the dict
        if len(temp_dict) == keys_amount:  # Check if required amount of keys are already generated
            break  # Closing the loop filling the dict
    # print(temp_dict)
    return dict_sort(temp_dict)  # return created dict


# Function to generate list of dicts, gets int value as amount of dicts to append, as default gets random value
def generating_list_of_dicts_with_random_values(number_of_dicts_in_list=random.randint(3, 10)) -> list:
    list_of_dicts = []  # initialization of variable to collect generated dictionaries
    for x in range(number_of_dicts_in_list):
        list_of_dicts.append(generating_of_dictionary_with_random_values())
    return list_of_dicts  # return generated list of dicts


# Using defaultdict to get dict with all the keys and list of all value for this key
# It was used to find elements, that has the greatest values at first appearance for not to lose the data
def get_dict_will_all_values_from_list_of_dict(list_of_dicts: list) -> defaultdict:
    dict_with_all_values = defaultdict(list)
    for sub_dict in list_of_dicts:  # Iterate threw the list of dicts
        for key in sub_dict:  # Iterate threw the keys of iterated dict
            dict_with_all_values[key].append(sub_dict[key])  # append value of the key to existed or created key
    return dict_with_all_values


''' Task 2 part 2
 2. get previously generated list of dicts and create one common dict:
 if dicts have same key, we will take max value, and rename key with dict number with max value
 if key is only in one dict - take it as is,
 example:{'a_1': 5, 'b': 7, 'c': 35, 'g_2': 42}
 Each line of code should be commented with description.'''


# Function to compress list of dicts to one common dict
def compressing_list_of_dicts_to_one_dict(list_of_dicts: list) -> dict:
    new_dict = {}  # Initialization new dict variable
    dict_for_changed_elements = {}  # Initialization dict variable for changed elements (key = key, value = dict number)
    dict_with_key_count = {}

    for dict_num, current_dict in enumerate(list_of_dicts, start=1):
        for key in current_dict:
            if key in dict_with_key_count:
                dict_with_key_count[key] += 1
            else:
                dict_with_key_count[key] = 1

    for dict_num, current_dict in enumerate(list_of_dicts, start=1):  # Loop for detecting duplicates in keys
        for key in current_dict:  # loop for filling in new_dict with all values
            if key in new_dict:
                if current_dict[key] > new_dict[key]:
                    new_dict[key] = current_dict[key]
                    dict_for_changed_elements[key] = dict_num
                # else:
                # dict_for_changed_elements.pop(key)
            else:
                new_dict[key] = current_dict[key]
                if dict_with_key_count[key] != 1:
                    dict_for_changed_elements[key] = dict_num

    new_final_dict = {}  # dict variable for items with proper key names

    for key in new_dict:  # loop for creating dict with proper keys
        if key in dict_for_changed_elements:
            new_final_dict[f"{key}_{dict_for_changed_elements[key]}"] = new_dict[key]
        else:
            new_final_dict[key] = new_dict[key]

    return dict_sort(new_final_dict)  # return sorted final dict


print(compressing_list_of_dicts_to_one_dict(generating_list_of_dicts_with_random_values()))
